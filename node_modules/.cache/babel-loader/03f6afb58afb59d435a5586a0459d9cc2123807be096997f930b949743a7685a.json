{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"SangJiTu\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _cache[0] || (_cache[0] = [_createElementVNode(\"div\", {\n    id: \"main\"\n  }, null, -1 /* HOISTED */)]));\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_cache","_createElementVNode","id"],"sources":["D:\\project\\idea-project\\jiapudemo1\\jiapudemo1\\src\\components\\SangJiTu.vue"],"sourcesContent":["<template>\r\n  <div class=\"SangJiTu\">\r\n    <div id=\"main\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts/core';\r\nimport { TitleComponent, TooltipComponent } from 'echarts/components';\r\nimport { SankeyChart } from 'echarts/charts';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\n\r\n// 注册必要的组件\r\necharts.use([TitleComponent, TooltipComponent, SankeyChart, CanvasRenderer]);\r\n\r\nexport default {\r\n  name: 'SangJiTu',\r\n  props: {\r\n    selectedProvince: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    selectedSurname: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    data: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      var chartDom = document.getElementById('main');\r\n      var myChart = echarts.init(chartDom);\r\n\r\n      myChart.showLoading();\r\n\r\n      // 初始加载时使用默认的数据（浙江省，李姓）\r\n      this.generateSankeyData(this.selectedProvince, this.selectedSurname).then(data => {\r\n        myChart.hideLoading();\r\n        myChart.setOption({\r\n          title: {\r\n            text: '家族迁徙桑基图'\r\n          },\r\n          tooltip: {\r\n            trigger: 'item',\r\n            triggerOn: 'mousemove'\r\n          },\r\n          series: [\r\n            {\r\n              type: 'sankey',\r\n              data: data.nodes,\r\n              links: data.links,\r\n              emphasis: {\r\n                focus: 'adjacency'\r\n              },\r\n              levels: [\r\n                {\r\n                  depth: 0,\r\n                  itemStyle: { color: '#fbb4ae' },\r\n                  lineStyle: { color: 'source', opacity: 0.6 }\r\n                },\r\n                {\r\n                  depth: 1,\r\n                  itemStyle: { color: '#b3cde3' },\r\n                  lineStyle: { color: 'source', opacity: 0.6 }\r\n                },\r\n                {\r\n                  depth: 2,\r\n                  itemStyle: { color: '#ccebc5' },\r\n                  lineStyle: { color: 'source', opacity: 0.6 }\r\n                },\r\n                {\r\n                  depth: 3,\r\n                  itemStyle: { color: '#decbe4' },\r\n                  lineStyle: { color: 'source', opacity: 0.6 }\r\n                }\r\n              ],\r\n              lineStyle: {\r\n                curveness: 0.5\r\n              }\r\n            }\r\n          ]\r\n        });\r\n      }).catch(error => {\r\n        console.error('Error loading data for Sankey chart:', error);\r\n        myChart.hideLoading();\r\n      });\r\n    },\r\n\r\n    // 生成桑基图的数据\r\n    async generateSankeyData(province, surname) {\r\n      const filteredData = this.data.filter(item => item.居地 === province && item.姓氏 === surname);\r\n\r\n      const nodes = [\r\n        { name: '始祖原居地' },\r\n        { name: '始祖迁居地' },\r\n        { name: '始迁祖原居地' },\r\n        { name: '始迁祖迁居地' }\r\n      ];\r\n\r\n      const links = [];\r\n\r\n      filteredData.forEach(item => {\r\n        const startNode = item['始祖原居地'] || '未知';\r\n        const endNode = item['始祖迁居地'] || '未知';\r\n        const startMigrationNode = item['始迁祖原居地'] || '未知';\r\n        const endMigrationNode = item['始迁祖迁居地'] || '未知';\r\n\r\n        if (startNode !== '未知' && endNode !== '未知') {\r\n          links.push({ source: startNode, target: endNode });\r\n        }\r\n\r\n        if (startMigrationNode !== '未知' && endMigrationNode !== '未知') {\r\n          links.push({ source: startMigrationNode, target: endMigrationNode });\r\n        }\r\n      });\r\n\r\n      return {\r\n        nodes,\r\n        links\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 样式保持不变 */\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAU;;uBAArBC,mBAAA,CAEM,OAFNC,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJC,mBAAA,CAAqB;IAAhBC,EAAE,EAAC;EAAM,2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}