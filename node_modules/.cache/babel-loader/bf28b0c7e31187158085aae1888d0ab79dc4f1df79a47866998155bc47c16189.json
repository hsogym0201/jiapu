{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport * as d3 from 'd3';\nexport default {\n  data() {\n    return {\n      data: [],\n      // 数据初始化为空数组\n      selectedProvince: 'defaultProvince',\n      selectedSurname: 'defaultSurname'\n    };\n  },\n  mounted() {\n    // 模拟数据加载过程（实际项目中应从API或数据库加载）\n    this.fetchData();\n\n    // 当数据加载完成后，再初始化图表\n  },\n  methods: {\n    async fetchData() {\n      try {\n        // 假设你是从API获取数据\n        // 在这里模拟一个API调用，直接返回静态数据\n        // 实际中，你可以使用axios、fetch等来获取数据\n\n        const response = await fetch('your-api-url'); // 使用实际的API URL\n        const data = await response.json();\n\n        // 假设返回的数据格式为：\n        // [{ 姓氏: '王', 居地: '北京', 始祖原居地: '福建', 始祖迁居地: '浙江', 始迁祖原居地: '广东', 始迁祖迁居地: '上海' }, ...]\n        this.data = data;\n\n        // 数据加载后，初始化图表\n        this.initChart();\n      } catch (error) {\n        console.error('Data loading error:', error);\n      }\n    },\n    async generateSankeyData(province, surname) {\n      // 确保 data 已加载且为数组\n      if (!Array.isArray(this.data)) {\n        console.error('Data is not an array:', this.data);\n        return {\n          nodes: [],\n          links: []\n        };\n      }\n      const filteredData = this.data.filter(item => item.居地 === province && item.姓氏 === surname);\n      console.log('Filtered data:', filteredData);\n      const nodes = [{\n        name: '始祖原居地'\n      }, {\n        name: '始祖迁居地'\n      }, {\n        name: '始迁祖原居地'\n      }, {\n        name: '始迁祖迁居地'\n      }];\n      const links = [];\n      filteredData.forEach(item => {\n        const startNode = item['始祖原居地'] || '未知';\n        const endNode = item['始祖迁居地'] || '未知';\n        const startMigrationNode = item['始迁祖原居地'] || '未知';\n        const endMigrationNode = item['始迁祖迁居地'] || '未知';\n        if (startNode !== '未知' && endNode !== '未知') {\n          links.push({\n            source: startNode,\n            target: endNode\n          });\n        }\n        if (startMigrationNode !== '未知' && endMigrationNode !== '未知') {\n          links.push({\n            source: startMigrationNode,\n            target: endMigrationNode\n          });\n        }\n      });\n      return {\n        nodes,\n        links\n      };\n    },\n    async initChart() {\n      const {\n        nodes,\n        links\n      } = await this.generateSankeyData(this.selectedProvince, this.selectedSurname);\n      if (nodes.length === 0 || links.length === 0) {\n        console.error('No data to display for the Sankey chart.');\n        return;\n      }\n      const svg = d3.select(this.$refs.chart).append('svg').attr('width', 800).attr('height', 600);\n      const sankey = d3.sankey().nodeWidth(36).nodePadding(40).size([800, 600]);\n      const graph = {\n        nodes,\n        links\n      };\n      sankey(graph);\n\n      // 绘制节点\n      const node = svg.append('g').selectAll('.node').data(graph.nodes).enter().append('g').attr('class', 'node').attr('transform', d => `translate(${d.x0},${d.y0})`);\n      node.append('rect').attr('height', d => d.y1 - d.y0).attr('width', sankey.nodeWidth()).attr('fill', 'steelblue').attr('stroke', 'none');\n      node.append('text').attr('x', -6).attr('y', d => (d.y1 - d.y0) / 2).attr('dy', '.35em').attr('text-anchor', 'end').text(d => d.name);\n\n      // 绘制连接\n      svg.append('g').selectAll('.link').data(graph.links).enter().append('path').attr('class', 'link').attr('d', d3.sankeyLinkHorizontal()).attr('fill', 'none').attr('stroke', '#000').attr('stroke-opacity', 0.2).attr('stroke-width', d => Math.max(1, d.width));\n    }\n  }\n};","map":{"version":3,"names":["d3","data","selectedProvince","selectedSurname","mounted","fetchData","methods","response","fetch","json","initChart","error","console","generateSankeyData","province","surname","Array","isArray","nodes","links","filteredData","filter","item","居地","姓氏","log","name","forEach","startNode","endNode","startMigrationNode","endMigrationNode","push","source","target","length","svg","select","$refs","chart","append","attr","sankey","nodeWidth","nodePadding","size","graph","node","selectAll","enter","d","x0","y0","y1","text","sankeyLinkHorizontal","Math","max","width"],"sources":["D:\\project\\idea-project\\jiapudemo1\\jiapudemo1\\src\\components\\SangJiTu.vue"],"sourcesContent":["<template>\r\n  <div class=\"sankey-chart-container\">\r\n    <div ref=\"chart\" style=\"height: 500px;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      data: [],  // 数据初始化为空数组\r\n      selectedProvince: 'defaultProvince',\r\n      selectedSurname: 'defaultSurname',\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    // 模拟数据加载过程（实际项目中应从API或数据库加载）\r\n    this.fetchData();\r\n\r\n    // 当数据加载完成后，再初始化图表\r\n  },\r\n\r\n  methods: {\r\n    async fetchData() {\r\n      try {\r\n        // 假设你是从API获取数据\r\n        // 在这里模拟一个API调用，直接返回静态数据\r\n        // 实际中，你可以使用axios、fetch等来获取数据\r\n\r\n        const response = await fetch('your-api-url');  // 使用实际的API URL\r\n        const data = await response.json();\r\n\r\n        // 假设返回的数据格式为：\r\n        // [{ 姓氏: '王', 居地: '北京', 始祖原居地: '福建', 始祖迁居地: '浙江', 始迁祖原居地: '广东', 始迁祖迁居地: '上海' }, ...]\r\n        this.data = data;\r\n\r\n        // 数据加载后，初始化图表\r\n        this.initChart();\r\n      } catch (error) {\r\n        console.error('Data loading error:', error);\r\n      }\r\n    },\r\n\r\n    async generateSankeyData(province, surname) {\r\n      // 确保 data 已加载且为数组\r\n      if (!Array.isArray(this.data)) {\r\n        console.error('Data is not an array:', this.data);\r\n        return { nodes: [], links: [] };\r\n      }\r\n\r\n      const filteredData = this.data.filter(item => item.居地 === province && item.姓氏 === surname);\r\n      console.log('Filtered data:', filteredData);\r\n\r\n      const nodes = [\r\n        { name: '始祖原居地' },\r\n        { name: '始祖迁居地' },\r\n        { name: '始迁祖原居地' },\r\n        { name: '始迁祖迁居地' }\r\n      ];\r\n\r\n      const links = [];\r\n\r\n      filteredData.forEach(item => {\r\n        const startNode = item['始祖原居地'] || '未知';\r\n        const endNode = item['始祖迁居地'] || '未知';\r\n        const startMigrationNode = item['始迁祖原居地'] || '未知';\r\n        const endMigrationNode = item['始迁祖迁居地'] || '未知';\r\n\r\n        if (startNode !== '未知' && endNode !== '未知') {\r\n          links.push({ source: startNode, target: endNode });\r\n        }\r\n\r\n        if (startMigrationNode !== '未知' && endMigrationNode !== '未知') {\r\n          links.push({ source: startMigrationNode, target: endMigrationNode });\r\n        }\r\n      });\r\n\r\n      return {\r\n        nodes,\r\n        links\r\n      };\r\n    },\r\n\r\n    async initChart() {\r\n      const { nodes, links } = await this.generateSankeyData(this.selectedProvince, this.selectedSurname);\r\n\r\n      if (nodes.length === 0 || links.length === 0) {\r\n        console.error('No data to display for the Sankey chart.');\r\n        return;\r\n      }\r\n\r\n      const svg = d3.select(this.$refs.chart).append('svg')\r\n          .attr('width', 800)\r\n          .attr('height', 600);\r\n\r\n      const sankey = d3.sankey()\r\n          .nodeWidth(36)\r\n          .nodePadding(40)\r\n          .size([800, 600]);\r\n\r\n      const graph = { nodes, links };\r\n\r\n      sankey(graph);\r\n\r\n      // 绘制节点\r\n      const node = svg.append('g').selectAll('.node')\r\n          .data(graph.nodes)\r\n          .enter().append('g')\r\n          .attr('class', 'node')\r\n          .attr('transform', (d) => `translate(${d.x0},${d.y0})`);\r\n\r\n      node.append('rect')\r\n          .attr('height', (d) => d.y1 - d.y0)\r\n          .attr('width', sankey.nodeWidth())\r\n          .attr('fill', 'steelblue')\r\n          .attr('stroke', 'none');\r\n\r\n      node.append('text')\r\n          .attr('x', -6)\r\n          .attr('y', (d) => (d.y1 - d.y0) / 2)\r\n          .attr('dy', '.35em')\r\n          .attr('text-anchor', 'end')\r\n          .text((d) => d.name);\r\n\r\n      // 绘制连接\r\n      svg.append('g').selectAll('.link')\r\n          .data(graph.links)\r\n          .enter().append('path')\r\n          .attr('class', 'link')\r\n          .attr('d', d3.sankeyLinkHorizontal())\r\n          .attr('fill', 'none')\r\n          .attr('stroke', '#000')\r\n          .attr('stroke-opacity', 0.2)\r\n          .attr('stroke-width', (d) => Math.max(1, d.width));\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.node rect {\r\n  cursor: pointer;\r\n  fill: #0077cc;\r\n  stroke: none;\r\n}\r\n\r\n.node text {\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  fill: #fff;\r\n}\r\n\r\n.link {\r\n  fill: none;\r\n  stroke: #000;\r\n  stroke-opacity: 0.2;\r\n}\r\n\r\n.sankey-chart-container {\r\n  margin: 20px auto;\r\n  width: 80%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}