{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"sankey-chart-container\"\n};\nconst _hoisted_2 = {\n  ref: \"chart\",\n  style: {\n    \"height\": \"500px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["D:\\project\\idea-project\\jiapudemo1\\jiapudemo1\\src\\components\\SangJiTu.vue"],"sourcesContent":["<template>\r\n  <div class=\"sankey-chart-container\">\r\n    <div ref=\"chart\" style=\"height: 500px;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      data: [],  // 数据初始化为空数组\r\n      selectedProvince: 'defaultProvince',\r\n      selectedSurname: 'defaultSurname',\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    // 模拟数据加载过程（实际项目中应从API或数据库加载）\r\n    this.fetchData();\r\n\r\n    // 当数据加载完成后，再初始化图表\r\n  },\r\n\r\n  methods: {\r\n    async fetchData() {\r\n      try {\r\n        // 假设你是从API获取数据\r\n        // 在这里模拟一个API调用，直接返回静态数据\r\n        // 实际中，你可以使用axios、fetch等来获取数据\r\n\r\n        const response = await fetch('your-api-url');  // 使用实际的API URL\r\n        const data = await response.json();\r\n\r\n        // 假设返回的数据格式为：\r\n        // [{ 姓氏: '王', 居地: '北京', 始祖原居地: '福建', 始祖迁居地: '浙江', 始迁祖原居地: '广东', 始迁祖迁居地: '上海' }, ...]\r\n        this.data = data;\r\n\r\n        // 数据加载后，初始化图表\r\n        this.initChart();\r\n      } catch (error) {\r\n        console.error('Data loading error:', error);\r\n      }\r\n    },\r\n\r\n    async generateSankeyData(province, surname) {\r\n      // 确保 data 已加载且为数组\r\n      if (!Array.isArray(this.data)) {\r\n        console.error('Data is not an array:', this.data);\r\n        return { nodes: [], links: [] };\r\n      }\r\n\r\n      const filteredData = this.data.filter(item => item.居地 === province && item.姓氏 === surname);\r\n      console.log('Filtered data:', filteredData);\r\n\r\n      const nodes = [\r\n        { name: '始祖原居地' },\r\n        { name: '始祖迁居地' },\r\n        { name: '始迁祖原居地' },\r\n        { name: '始迁祖迁居地' }\r\n      ];\r\n\r\n      const links = [];\r\n\r\n      filteredData.forEach(item => {\r\n        const startNode = item['始祖原居地'] || '未知';\r\n        const endNode = item['始祖迁居地'] || '未知';\r\n        const startMigrationNode = item['始迁祖原居地'] || '未知';\r\n        const endMigrationNode = item['始迁祖迁居地'] || '未知';\r\n\r\n        if (startNode !== '未知' && endNode !== '未知') {\r\n          links.push({ source: startNode, target: endNode });\r\n        }\r\n\r\n        if (startMigrationNode !== '未知' && endMigrationNode !== '未知') {\r\n          links.push({ source: startMigrationNode, target: endMigrationNode });\r\n        }\r\n      });\r\n\r\n      return {\r\n        nodes,\r\n        links\r\n      };\r\n    },\r\n\r\n    async initChart() {\r\n      const { nodes, links } = await this.generateSankeyData(this.selectedProvince, this.selectedSurname);\r\n\r\n      if (nodes.length === 0 || links.length === 0) {\r\n        console.error('No data to display for the Sankey chart.');\r\n        return;\r\n      }\r\n\r\n      const svg = d3.select(this.$refs.chart).append('svg')\r\n          .attr('width', 800)\r\n          .attr('height', 600);\r\n\r\n      const sankey = d3.sankey()\r\n          .nodeWidth(36)\r\n          .nodePadding(40)\r\n          .size([800, 600]);\r\n\r\n      const graph = { nodes, links };\r\n\r\n      sankey(graph);\r\n\r\n      // 绘制节点\r\n      const node = svg.append('g').selectAll('.node')\r\n          .data(graph.nodes)\r\n          .enter().append('g')\r\n          .attr('class', 'node')\r\n          .attr('transform', (d) => `translate(${d.x0},${d.y0})`);\r\n\r\n      node.append('rect')\r\n          .attr('height', (d) => d.y1 - d.y0)\r\n          .attr('width', sankey.nodeWidth())\r\n          .attr('fill', 'steelblue')\r\n          .attr('stroke', 'none');\r\n\r\n      node.append('text')\r\n          .attr('x', -6)\r\n          .attr('y', (d) => (d.y1 - d.y0) / 2)\r\n          .attr('dy', '.35em')\r\n          .attr('text-anchor', 'end')\r\n          .text((d) => d.name);\r\n\r\n      // 绘制连接\r\n      svg.append('g').selectAll('.link')\r\n          .data(graph.links)\r\n          .enter().append('path')\r\n          .attr('class', 'link')\r\n          .attr('d', d3.sankeyLinkHorizontal())\r\n          .attr('fill', 'none')\r\n          .attr('stroke', '#000')\r\n          .attr('stroke-opacity', 0.2)\r\n          .attr('stroke-width', (d) => Math.max(1, d.width));\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.node rect {\r\n  cursor: pointer;\r\n  fill: #0077cc;\r\n  stroke: none;\r\n}\r\n\r\n.node text {\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  fill: #fff;\r\n}\r\n\r\n.link {\r\n  fill: none;\r\n  stroke: #000;\r\n  stroke-opacity: 0.2;\r\n}\r\n\r\n.sankey-chart-container {\r\n  margin: 20px auto;\r\n  width: 80%;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAwB;;EAC5BC,GAAG,EAAC,OAAO;EAACC,KAAsB,EAAtB;IAAA;EAAA;;;uBADnBC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAA8C,OAA9CC,UAA8C,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}