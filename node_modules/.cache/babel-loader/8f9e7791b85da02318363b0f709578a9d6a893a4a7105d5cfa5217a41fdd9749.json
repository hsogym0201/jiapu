{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport XingShiXuanZe from './components/XingShiXuanZe.vue';\nimport DiTu1 from './components/DiTu1.vue';\nimport CiYun from '@/components/CiYun.vue';\nimport DiTu2 from '@/components/DiTu2.vue';\nimport ZheXianTu from '@/components/ZheXianTu.vue';\nimport ZhuZhuangTu from '@/components/ZhuZhuangTu.vue';\nimport SangJiTu from \"@/components/SangJiTu.vue\";\nconst jsonData = require('./assets/new.json');\nexport default {\n  name: 'App',\n  components: {\n    SangJiTu,\n    XingShiXuanZe,\n    DiTu1,\n    CiYun,\n    DiTu2,\n    ZheXianTu,\n    ZhuZhuangTu\n  },\n  data() {\n    return {\n      menuItems: ['家谱地图展示', '地域姓氏构成对比', '姓氏时空上的分布趋势'],\n      activeIndex: 0,\n      words: [],\n      versionData: [],\n      //折线图版本数据\n      versionTypeData: [],\n      //柱状图版本类型数据\n      chartTitle: '浙江省李姓家谱数量变化',\n      // 折线图默认标题\n      ChartTitle: '浙江省李姓家谱版本类型统计',\n      clickedWord: null,\n      showPopup: false,\n      selectedProvince: '浙江',\n      // 默认选中省份\n      defaultSurname: '李',\n      // 默认姓氏\n      sankeyData: [],\n      // 用来存储桑基图数据\n      // ##################################################\n      popupMessage: \"该省份暂无数据，请选择其他省份！\" // 弹窗提示信息\n      // ##################################################\n    };\n  },\n  methods: {\n    setActive(index) {\n      this.activeIndex = index;\n    },\n    // // 获取选中省份的前20个姓氏\n    // getTop20Surnames(province) {\n    //   const surnameCounts = {};\n    //   jsonData.forEach((item) => {\n    //     if (item.居地 === province) {\n    //       surnameCounts[item.姓氏] = (surnameCounts[item.姓氏] || 0) + 1;\n    //     }\n    //   });\n\n    //   const sortedSurnames = Object.entries(surnameCounts).sort((a, b) => b[1] - a[1]);\n    //   return sortedSurnames.map(([name]) => ({ name, light: true }));\n    // },\n\n    //  ##################################################\n    // 获取选中省份的前30个姓氏\n    getTop20Surnames(province) {\n      const surnameCounts = {};\n\n      // 统计姓氏数量\n      jsonData.forEach(item => {\n        if (item.居地 === province) {\n          surnameCounts[item.姓氏] = (surnameCounts[item.姓氏] || 0) + 1;\n        }\n      });\n\n      // 如果该省份没有数据，触发弹窗\n      if (Object.keys(surnameCounts).length === 0) {\n        this.showPopup = true; // 显示弹窗\n        return []; // 返回空数组，避免继续执行\n      }\n\n      // 按数量从高到低排序\n      const sortedSurnames = Object.entries(surnameCounts).sort((a, b) => b[1] - a[1]);\n\n      // 分配样式类别\n      // eslint-disable-next-line no-unused-vars\n      return sortedSurnames.slice(0, 30).map(([name, count], index) => {\n        let lightClass;\n        if (index < 10) {\n          lightClass = \"large\"; // 前 10 个用 large\n        } else if (index < 20) {\n          lightClass = \"medium\"; // 10-20 名用 medium\n        } else {\n          lightClass = \"small\"; // 20-30 名用 small\n        }\n        return {\n          name,\n          light: lightClass\n        }; // 返回对应的样式类别\n      });\n    },\n    closePopup() {\n      this.showPopup = false; // 关闭弹窗\n    },\n    //  ##################################################\n\n    // 获取指定姓氏的版本年代数据\n    getSurnameVersionData(surname) {\n      const versionCounts = {};\n      jsonData.forEach(item => {\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince) {\n          const version = item.版本年代;\n          versionCounts[version] = (versionCounts[version] || 0) + 1;\n        }\n      });\n      const versionData = Object.entries(versionCounts).map(([version, count]) => ({\n        version,\n        count\n      }));\n      versionData.sort((a, b) => a.version - b.version);\n      return versionData;\n    },\n    getVersionTypeData(surname) {\n      const versionTypeCounts = {};\n      jsonData.forEach(item => {\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince) {\n          const version = item.版本类型;\n          versionTypeCounts[version] = (versionTypeCounts[version] || 0) + 1;\n        }\n      });\n      const versionTypeData = Object.entries(versionTypeCounts).map(([version, count]) => ({\n        version,\n        count\n      }));\n      versionTypeData.sort((a, b) => a.version - b.version);\n      return versionTypeData;\n    },\n    getSankeyData(surname) {\n      const sankeyData = {\n        nodes: [],\n        links: []\n      };\n      const addedNodes = new Set(); // 用于存储已添加的节点\n      const graph = new Map(); // 用于存储图的结构，防止环路\n\n      jsonData.forEach(item => {\n        // 过滤掉始祖原居地、始祖迁居地、始迁祖原居地、始迁祖迁居地为0的数据\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince && item.始祖原居地 !== 0 && item.始祖迁居地 !== 0 && item.始迁祖原居地 !== 0 && item.始迁祖迁居地 !== 0) {\n          const nodes = [item.始祖原居地, item.始祖迁居地, item.始迁祖原居地, item.始迁祖迁居地];\n          nodes.forEach(location => {\n            if (!addedNodes.has(location)) {\n              addedNodes.add(location);\n              sankeyData.nodes.push({\n                name: location\n              });\n              graph.set(location, []); // 初始化图\n            }\n          });\n\n          // 检查并添加合法链接\n          const link1 = {\n            source: item.始祖原居地,\n            target: item.始祖迁居地,\n            value: 1\n          };\n          const link2 = {\n            source: item.始迁祖原居地,\n            target: item.始迁祖迁居地,\n            value: 1\n          };\n\n          // 添加始祖原居地到始祖迁居地的链接\n          if (link1.source !== link1.target && !this.hasCycle(graph, link1.source, link1.target)) {\n            graph.get(link1.source).push(link1.target); // 更新图\n            sankeyData.links.push(link1);\n          }\n\n          // 添加始迁祖原居地到始迁祖迁居地的链接\n          if (link2.source !== link2.target && !this.hasCycle(graph, link2.source, link2.target)) {\n            graph.get(link2.source).push(link2.target); // 更新图\n            sankeyData.links.push(link2);\n          }\n\n          // 添加始祖迁居地和始迁祖原居地之间的连接（如果相同）\n          if (item.始祖迁居地 === item.始迁祖原居地) {\n            const link3 = {\n              source: item.始祖迁居地,\n              target: item.始迁祖原居地,\n              value: 1\n            };\n            if (!this.hasCycle(graph, link3.source, link3.target)) {\n              graph.get(link3.source).push(link3.target); // 更新图\n              sankeyData.links.push(link3);\n            }\n          }\n        }\n      });\n      return sankeyData;\n    },\n    // 检查是否形成环路\n    hasCycle(graph, source) {\n      // 深度优先搜索（DFS）检测环路\n      const visited = new Set();\n      function dfs(node) {\n        if (visited.has(node)) return true; // 如果节点已被访问过，说明形成了环路\n        visited.add(node);\n        if (graph.has(node)) {\n          for (const neighbor of graph.get(node)) {\n            if (dfs(neighbor)) return true;\n          }\n        }\n        visited.delete(node); // 回溯时，删除节点的访问记录\n        return false;\n      }\n\n      // 通过DFS从source开始，检查target是否能到达（形成环路）\n      return dfs(source);\n    },\n    // 处理词云点击事件，显示该姓氏的版本年代数据\n    handleWordClick(word) {\n      const surname = word.name;\n      this.versionData = this.getSurnameVersionData(surname);\n      this.chartTitle = `${this.selectedProvince}省${surname}姓家谱数量变化`; // 动态更新标题\n      this.updateLineChart(this.versionData); // 更新折线图\n\n      this.versionTypeData = this.getVersionTypeData(surname); // 获取该姓氏的版本类型数据\n      this.ChartTitle = `${this.selectedProvince}省${surname}姓家谱版本类型统计`; // 动态更新标题\n      this.updatePieChart(this.versionTypeData); // 调用饼图更新方法\n\n      this.sankeyData = this.getSankeyData(surname); // 更新桑基图数据\n      this.$refs.sangJiTu.updateChart(this.sankeyData); // 更新桑基图\n    },\n    // 更新折线图\n    updateLineChart(versionData) {\n      this.$refs.zheXianTu.updateChart(versionData);\n    },\n    // 更新饼图\n    updatePieChart(versionTypeData) {\n      this.$refs.zhuZhuangTu.updateChart(versionTypeData); // 通过ref更新柱状图组件的数据\n    },\n    // 处理地图点击事件，更新当前选中的省份\n    handleProvinceClick(province) {\n      this.selectedProvince = province;\n      this.words = this.getTop20Surnames(province); // 更新词云数据\n\n      this.versionData = this.getSurnameVersionData(this.defaultSurname); // 获取默认“李”姓数据\n      this.chartTitle = `${province}省${this.defaultSurname}姓家谱数量变化`; // 更新标题\n\n      this.versionTypeData = this.getVersionTypeData(this.defaultSurname);\n      this.ChartTitle = `${province}省${this.defaultSurname}姓家谱版本类型统计`;\n      this.sankeyData = this.getSankeyData(this.defaultSurname); // 默认展示“李”姓的桑基图\n      this.$refs.sangJiTu.updateChart(this.sankeyData); // 更新桑基图\n    }\n\n    // closePopup() {\n    //   this.showPopup = false;\n    // },\n  },\n  mounted() {\n    this.words = this.getTop20Surnames(this.selectedProvince); // 初始化词云数据\n    this.versionData = this.getSurnameVersionData(this.defaultSurname); // 默认显示“李”姓数据\n    this.versionTypeData = this.getVersionTypeData(this.defaultSurname);\n    this.sankeyData = this.getSankeyData(this.defaultSurname); // 默认展示“李”姓的桑基图\n  }\n};","map":{"version":3,"names":["XingShiXuanZe","DiTu1","CiYun","DiTu2","ZheXianTu","ZhuZhuangTu","SangJiTu","jsonData","require","name","components","data","menuItems","activeIndex","words","versionData","versionTypeData","chartTitle","ChartTitle","clickedWord","showPopup","selectedProvince","defaultSurname","sankeyData","popupMessage","methods","setActive","index","getTop20Surnames","province","surnameCounts","forEach","item","居地","姓氏","Object","keys","length","sortedSurnames","entries","sort","a","b","slice","map","count","lightClass","light","closePopup","getSurnameVersionData","surname","versionCounts","version","版本年代","getVersionTypeData","versionTypeCounts","版本类型","getSankeyData","nodes","links","addedNodes","Set","graph","Map","始祖原居地","始祖迁居地","始迁祖原居地","始迁祖迁居地","location","has","add","push","set","link1","source","target","value","link2","hasCycle","get","link3","visited","dfs","node","neighbor","delete","handleWordClick","word","updateLineChart","updatePieChart","$refs","sangJiTu","updateChart","zheXianTu","zhuZhuangTu","handleProvinceClick","mounted"],"sources":["D:\\project\\idea-project\\jiapudemo1\\jiapudemo1\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n\n    <div class=\"focus-image\" >\n      <img src=\"./assets/picture/background4.jpg\" alt=\"Focus Image\" class=\"image\" />\n      <div class=\"title\">\n        <h1 id = \"xungen\">寻 根 问 祖</h1>\n        <h1>探 索 家 族 的 历 史 脉 络</h1>\n        <h3>每 个 姓 氏 背 后 都 有 一 段 深 厚 的 历 史 与 文 化...</h3>\n      </div>\n    </div>\n\n\n    <div class=\"focus-img\">\n      <img src=\"./assets/picture/background5.jpg\" alt=\"Focus Image\" class=\"img\" />\n\n      <div class=\"content\">\n        <div class=\"logo\">\n          <img src=\"./assets/picture/background4.jpg\" alt=\"Logo\" />\n        </div>\n\n        <div class=\"text-content\">\n          <h1 style=\"font-size: 3vw; margin-top: -7vw;\">寻根问祖</h1>\n          <h1 style=\"font-size: 3vw; \">可以看见的家谱可视化平台</h1>\n          <h1 style=\"font-size: 3vw; \">VI5小组</h1>\n        </div>\n\n      </div>\n    </div>\n\n\n    <div class=\"navbar\">\n      <div class=\"navbar-title\">\n        寻根问祖 <span>可以看见的家谱可视化平台</span>\n      </div>\n      <div class=\"navbar-menu\">\n        <a\n            v-for=\"(item, index) in menuItems\"\n            :key=\"index\"\n            href=\"#\"\n            :class=\"['menu-item', { active: activeIndex === index }]\"\n            @click=\"setActive(index)\"\n        >\n          {{ item }}\n        </a>\n      </div>\n    </div>\n\n    <h4>家谱地图展示--了解你的姓氏在全国各地的家族故事</h4>\n    <div class=\"horizontal-container\">\n      <XingShiXuanZe />\n      <DiTu1 />\n    </div>\n\n    <hr />\n    <h4>地域姓氏构成对比--探索各地的家族足迹</h4>\n    <div class=\"horizontal-container\">\n      <CiYun :wordArr=\"words\" @word-clicked=\"handleWordClick\" />\n      <DiTu2 @province-clicked=\"handleProvinceClick\" />\n    </div>\n\n    <hr />\n    <h4>姓氏时空上的分布趋势--深入家族传承之路与繁衍之势</h4>\n    <div class=\"horizontal-container\">\n      <ZheXianTu ref=\"zheXianTu\" :versionData=\"versionData\" :chartTitle=\"chartTitle\" />\n      <ZhuZhuangTu ref=\"zhuZhuangTu\" :versionTypeData=\"versionTypeData\" :ChartTitle=\"ChartTitle\" />\n    </div>\n    <hr>\n    <h4>家族迁徙路径--探索家族的迁徙脉络</h4>\n    <div class=\"horizontal-container\">\n      <SangJiTu ref=\"sangJiTu\" :sankeyData=\"sankeyData\" />\n    </div>\n\n  </div>\n\n<!-- ##################################### -->\n  <div v-if=\"showPopup\" class=\"popup\">\n    <div class=\"popup-content\">\n      <p>{{ popupMessage }}</p>\n      <button @click=\"closePopup\">关闭</button>\n    </div>\n  </div>\n<!-- ##################################### -->\n\n</template>\n\n<script>\nimport XingShiXuanZe from './components/XingShiXuanZe.vue';\nimport DiTu1 from './components/DiTu1.vue';\nimport CiYun from '@/components/CiYun.vue';\nimport DiTu2 from '@/components/DiTu2.vue';\nimport ZheXianTu from '@/components/ZheXianTu.vue';\nimport ZhuZhuangTu from '@/components/ZhuZhuangTu.vue';\nimport SangJiTu  from \"@/components/SangJiTu.vue\";\n\nconst jsonData = require('./assets/new.json');\n\nexport default {\n  name: 'App',\n  components: {\n    SangJiTu,\n    XingShiXuanZe,\n    DiTu1,\n    CiYun,\n    DiTu2,\n    ZheXianTu,\n    ZhuZhuangTu,\n  },\n  data() {\n    return {\n      menuItems: ['家谱地图展示', '地域姓氏构成对比', '姓氏时空上的分布趋势'],\n      activeIndex: 0,\n      words: [],\n      versionData: [],//折线图版本数据\n      versionTypeData: [],//柱状图版本类型数据\n      chartTitle: '浙江省李姓家谱数量变化',  // 折线图默认标题\n      ChartTitle: '浙江省李姓家谱版本类型统计',\n      clickedWord: null,\n      showPopup: false,\n      selectedProvince: '浙江', // 默认选中省份\n      defaultSurname: '李', // 默认姓氏\n      sankeyData: [], // 用来存储桑基图数据\n      // ##################################################\n      popupMessage: \"该省份暂无数据，请选择其他省份！\", // 弹窗提示信息\n      // ##################################################\n    };\n  },\n  methods: {\n    setActive(index) {\n      this.activeIndex = index;\n    },\n\n    // // 获取选中省份的前20个姓氏\n    // getTop20Surnames(province) {\n    //   const surnameCounts = {};\n    //   jsonData.forEach((item) => {\n    //     if (item.居地 === province) {\n    //       surnameCounts[item.姓氏] = (surnameCounts[item.姓氏] || 0) + 1;\n    //     }\n    //   });\n\n    //   const sortedSurnames = Object.entries(surnameCounts).sort((a, b) => b[1] - a[1]);\n    //   return sortedSurnames.map(([name]) => ({ name, light: true }));\n    // },\n\n    //  ##################################################\n     // 获取选中省份的前30个姓氏\n     getTop20Surnames(province) {\n      const surnameCounts = {};\n\n      // 统计姓氏数量\n      jsonData.forEach((item) => {\n        if (item.居地 === province) {\n          surnameCounts[item.姓氏] = (surnameCounts[item.姓氏] || 0) + 1;\n        }\n      });\n\n      // 如果该省份没有数据，触发弹窗\n      if (Object.keys(surnameCounts).length === 0) {\n        this.showPopup = true; // 显示弹窗\n        return []; // 返回空数组，避免继续执行\n      }\n\n      // 按数量从高到低排序\n      const sortedSurnames = Object.entries(surnameCounts).sort((a, b) => b[1] - a[1]);\n\n      // 分配样式类别\n      // eslint-disable-next-line no-unused-vars\n      return sortedSurnames.slice(0, 30).map(([name, count], index) => {\n        let lightClass;\n        if (index < 10) {\n          lightClass = \"large\"; // 前 10 个用 large\n        } else if (index < 20) {\n          lightClass = \"medium\"; // 10-20 名用 medium\n        } else {\n          lightClass = \"small\"; // 20-30 名用 small\n        }\n        return { name, light: lightClass }; // 返回对应的样式类别\n      });\n    },\n    closePopup() {\n      this.showPopup = false; // 关闭弹窗\n    },\n    //  ##################################################\n\n    // 获取指定姓氏的版本年代数据\n    getSurnameVersionData(surname) {\n      const versionCounts = {};\n\n      jsonData.forEach(item => {\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince) {\n          const version = item.版本年代;\n          versionCounts[version] = (versionCounts[version] || 0) + 1;\n        }\n      });\n\n      const versionData = Object.entries(versionCounts).map(([version, count]) => ({\n        version,\n        count,\n      }));\n\n      versionData.sort((a, b) => a.version - b.version);\n      return versionData;\n    },\n\n    getVersionTypeData(surname) {\n      const versionTypeCounts = {};\n\n      jsonData.forEach(item => {\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince) {\n          const version = item.版本类型;\n          versionTypeCounts[version] = (versionTypeCounts[version] || 0) + 1;\n        }\n      });\n\n      const  versionTypeData = Object.entries(versionTypeCounts).map(([version, count]) => ({\n        version,\n        count,\n      }));\n\n      versionTypeData.sort((a, b) => a.version - b.version);\n      return versionTypeData;\n    },\n\n    getSankeyData(surname) {\n      const sankeyData = { nodes: [], links: [] };\n      const addedNodes = new Set(); // 用于存储已添加的节点\n      const graph = new Map(); // 用于存储图的结构，防止环路\n\n      jsonData.forEach(item => {\n        // 过滤掉始祖原居地、始祖迁居地、始迁祖原居地、始迁祖迁居地为0的数据\n        if (\n            item.姓氏 === surname &&\n            item.居地 === this.selectedProvince &&\n            item.始祖原居地 !== 0 &&\n            item.始祖迁居地 !== 0  &&\n            item.始迁祖原居地 !== 0 &&\n            item.始迁祖迁居地 !== 0\n        ) {\n          const nodes = [\n            item.始祖原居地,\n            item.始祖迁居地,\n            item.始迁祖原居地,\n            item.始迁祖迁居地\n          ];\n\n          nodes.forEach(location => {\n            if (!addedNodes.has(location)) {\n              addedNodes.add(location);\n              sankeyData.nodes.push({ name: location });\n              graph.set(location, []); // 初始化图\n            }\n          });\n\n          // 检查并添加合法链接\n          const link1 = {\n            source: item.始祖原居地,\n            target: item.始祖迁居地,\n            value: 1\n          };\n          const link2 = {\n            source: item.始迁祖原居地,\n            target: item.始迁祖迁居地,\n            value: 1\n          };\n\n          // 添加始祖原居地到始祖迁居地的链接\n          if (link1.source !== link1.target && !this.hasCycle(graph, link1.source, link1.target)) {\n            graph.get(link1.source).push(link1.target); // 更新图\n            sankeyData.links.push(link1);\n          }\n\n          // 添加始迁祖原居地到始迁祖迁居地的链接\n          if (link2.source !== link2.target && !this.hasCycle(graph, link2.source, link2.target)) {\n            graph.get(link2.source).push(link2.target); // 更新图\n            sankeyData.links.push(link2);\n          }\n\n          // 添加始祖迁居地和始迁祖原居地之间的连接（如果相同）\n          if (item.始祖迁居地 === item.始迁祖原居地) {\n            const link3 = {\n              source: item.始祖迁居地,\n              target: item.始迁祖原居地,\n              value: 1\n            };\n            if (!this.hasCycle(graph, link3.source, link3.target)) {\n              graph.get(link3.source).push(link3.target); // 更新图\n              sankeyData.links.push(link3);\n            }\n          }\n        }\n      });\n\n      return sankeyData;\n    },\n\n// 检查是否形成环路\n    hasCycle(graph, source, ) {\n      // 深度优先搜索（DFS）检测环路\n      const visited = new Set();\n\n      function dfs(node) {\n        if (visited.has(node)) return true; // 如果节点已被访问过，说明形成了环路\n        visited.add(node);\n        if (graph.has(node)) {\n          for (const neighbor of graph.get(node)) {\n            if (dfs(neighbor)) return true;\n          }\n        }\n        visited.delete(node); // 回溯时，删除节点的访问记录\n        return false;\n      }\n\n      // 通过DFS从source开始，检查target是否能到达（形成环路）\n      return dfs(source);\n    },\n\n    // 处理词云点击事件，显示该姓氏的版本年代数据\n    handleWordClick(word) {\n      const surname = word.name;\n      this.versionData = this.getSurnameVersionData(surname);\n      this.chartTitle = `${this.selectedProvince}省${surname}姓家谱数量变化`;  // 动态更新标题\n      this.updateLineChart(this.versionData); // 更新折线图\n\n      this.versionTypeData = this.getVersionTypeData(surname); // 获取该姓氏的版本类型数据\n      this.ChartTitle = `${this.selectedProvince}省${surname}姓家谱版本类型统计`;  // 动态更新标题\n      this.updatePieChart(this.versionTypeData); // 调用饼图更新方法\n\n      this.sankeyData = this.getSankeyData(surname); // 更新桑基图数据\n      this.$refs.sangJiTu.updateChart(this.sankeyData); // 更新桑基图\n    },\n\n    // 更新折线图\n    updateLineChart(versionData) {\n      this.$refs.zheXianTu.updateChart(versionData);\n    },\n    // 更新饼图\n    updatePieChart(versionTypeData) {\n      this.$refs.zhuZhuangTu.updateChart(versionTypeData); // 通过ref更新柱状图组件的数据\n    },\n\n    // 处理地图点击事件，更新当前选中的省份\n    handleProvinceClick(province) {\n      this.selectedProvince = province;\n      this.words = this.getTop20Surnames(province);  // 更新词云数据\n\n      this.versionData = this.getSurnameVersionData(this.defaultSurname);  // 获取默认“李”姓数据\n      this.chartTitle = `${province}省${this.defaultSurname}姓家谱数量变化`;  // 更新标题\n\n      this.versionTypeData = this.getVersionTypeData(this.defaultSurname);\n      this.ChartTitle = `${province}省${this.defaultSurname}姓家谱版本类型统计`;\n\n      this.sankeyData = this.getSankeyData(this.defaultSurname); // 默认展示“李”姓的桑基图\n      this.$refs.sangJiTu.updateChart(this.sankeyData); // 更新桑基图\n    },\n\n    // closePopup() {\n    //   this.showPopup = false;\n    // },\n  },\n  mounted() {\n    this.words = this.getTop20Surnames(this.selectedProvince);  // 初始化词云数据\n    this.versionData = this.getSurnameVersionData(this.defaultSurname);  // 默认显示“李”姓数据\n    this.versionTypeData = this.getVersionTypeData(this.defaultSurname);\n    this.sankeyData = this.getSankeyData(this.defaultSurname); // 默认展示“李”姓的桑基图\n  },\n};\n</script>\n\n<style scoped>\n@import './assets/font/font.css'; /* ############ add ######################## */\n\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n\n  background-image: url('./assets/picture/background4.jpg'); /* 替换为你的图片路径 */\n  background-size: cover; /* 背景填满整个页面 */\n  background-position: center; /* 背景居中 */\n  background-attachment: fixed; /* 背景固定，不随页面滚动 */\n}\nh1 {\n  font-family: '方正隶变简体', serif;\n  font-size: 9vh;\n  color: #000000;\n  margin-bottom: 20px;\n  font-weight:normal;\n  text-shadow: 3px 3px 5px grey;   /* #################################### */\n}\n#xungen{\n  font-size: 11vh;\n  margin-top:0;\n}\nh3 {\n  font-family: '方正隶变简体', serif;\n  font-size: 4vh;\n  color: #363533;\n  font-weight:normal;\n}\n\n\n\n\n/* ############ add start ######################## */\n.focus-img {\n  position: relative;\n  width: 100%;\n  height: 100vh; /* 可调整图片高度 */\n}\n.focus-img .img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover; /* 保证图片按比例填充容器 */\n}\n.focus-img .content {\n  position: absolute;\n  top: 53%; /* 居中 */\n  left: 47%;\n  height: 100%;\n  width: 100%;\n  transform: translate(-50%, -50%);\n  display: flex; /* 使用Flexbox布局 */\n  align-items: center; /* 垂直居中 */\n  justify-content: center; /* 居中对齐内容 */\n  gap:5vh\n}\n.logo img {\n  width: 30vw; \n  height: 30vw; \n  border-radius: 10%;\n}\n.text-content {\n  display: flex;\n  flex-direction: column; /* 使标题纵向排列 */\n  align-items: center; /* 文本内容居中 */\n}\n/* ############# add end ####################### */\n\n\n.focus-image {\n  position: relative;\n  width: 100%;\n  height: 100vh; /* 可调整图片高度 */\n}\n.focus-image .image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover; /* 保证图片按比例填充容器 */\n  background-color: gray;\n}\n\n.focus-image .title {\n  position: absolute;\n  top: 40%; /* 居中 */\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  background-color: #fffff0;\n  border-bottom: 1px solid #ddd;\n  font-family: 'Arial', sans-serif;\n  margin-left: 200px;\n  border: none;\n}\n.navbar-title {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #000;\n}\n.navbar-menu {\n  display: flex;\n  gap: 20px;\n  margin-right: 200px;\n}\n.menu-item {\n  text-decoration: none;\n  color: #333;\n  font-size: 1rem;\n  padding: 5px 10px;\n  position: relative;\n  transition: color 0.3s ease;\n}\n.menu-item:hover {\n  color: #f60;\n}\n.menu-item.active {\n  color: #f60;\n  font-weight: bold;\n}\n.horizontal-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 30px;\n  padding: 10px;\n}\n\n\n\n/* ############### add start##################### */\n.popup {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 9999;\n}\n.popup-content {\n  background: white;\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n.popup-content p {\n  margin-bottom: 20px;\n  font-size: 1rem;\n}\n.popup-content button {\n  padding: 10px 20px;\n  border: none;\n  background-color: #f60;\n  color: white;\n  font-size: 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n}\n.popup-content button:hover {\n  background-color: #e55;\n}\n/* ############# add end ####################### */\n\n</style>\n\n<style>\n/* 确保 HTML 和 body 没有默认边距 */\nhtml, body {\n  margin: 0; /* 去除外边距 */\n  padding: 0; /* 去除内边距 */\n  width: 100%; /* 设置宽度为100% */\n  height: 100%; /* 设置高度为100% */\n  overflow-x: hidden; /* 防止水平滚动条 */\n}\n\n/* 修改 #app 的样式，让背景图片填满整个页面 */\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n\n  background-image: url('./assets/picture/background4.jpg'); /* 替换为你的图片路径 */\n  background-position: center; /* 背景居中 */\n  background-attachment: fixed; /* 背景固定，不随页面滚动 */\n  width: 100%; /* 设置宽度为100% */\n  min-height: 100vh; /* 确保高度为视口高度 */\n}\n\n#app::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.5); /* 半透明的灰色遮罩 */\n  z-index: 1; /* 确保遮罩层在背景图片上方 */\n  background-size: cover; /* 背景填满整个页面 */\n}\n\n/* 确保内容在遮罩层之上 */\n#app > * {\n  position: relative;\n  z-index: 2; /* 确保内容在遮罩层之上 */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}