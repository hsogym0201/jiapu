{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport XingShiXuanZe from './components/XingShiXuanZe.vue';\nimport DiTu1 from './components/DiTu1.vue';\nimport CiYun from '@/components/CiYun.vue';\nimport DiTu2 from '@/components/DiTu2.vue';\nimport ZheXianTu from '@/components/ZheXianTu.vue';\nimport ZhuZhuangTu from '@/components/ZhuZhuangTu.vue';\nimport SangJiTu from \"@/components/SangJiTu.vue\";\nconst jsonData = require('./assets/new.json');\nexport default {\n  name: 'App',\n  components: {\n    SangJiTu,\n    XingShiXuanZe,\n    DiTu1,\n    CiYun,\n    DiTu2,\n    ZheXianTu,\n    ZhuZhuangTu\n  },\n  data() {\n    return {\n      menuItems: ['家谱地图展示', '地域姓氏构成对比', '姓氏时空上的分布趋势'],\n      activeIndex: 0,\n      words: [],\n      versionData: [],\n      //折线图版本数据\n      versionTypeData: [],\n      //柱状图版本类型数据\n      chartTitle: '浙江省李姓家谱数量变化',\n      // 折线图默认标题\n      ChartTitle: '浙江省李姓家谱版本类型统计',\n      clickedWord: null,\n      showPopup: false,\n      selectedProvince: '浙江',\n      // 默认选中省份\n      defaultSurname: '李',\n      // 默认姓氏\n      sankeyData: [] // 用来存储桑基图数据\n    };\n  },\n  methods: {\n    setActive(index) {\n      this.activeIndex = index;\n    },\n    // 获取选中省份的前20个姓氏\n    getTop20Surnames(province) {\n      const surnameCounts = {};\n      jsonData.forEach(item => {\n        if (item.居地 === province) {\n          surnameCounts[item.姓氏] = (surnameCounts[item.姓氏] || 0) + 1;\n        }\n      });\n      const sortedSurnames = Object.entries(surnameCounts).sort((a, b) => b[1] - a[1]);\n      return sortedSurnames.map(([name]) => ({\n        name,\n        light: true\n      }));\n    },\n    // 获取指定姓氏的版本年代数据\n    getSurnameVersionData(surname) {\n      const versionCounts = {};\n      jsonData.forEach(item => {\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince) {\n          const version = item.版本年代;\n          versionCounts[version] = (versionCounts[version] || 0) + 1;\n        }\n      });\n      const versionData = Object.entries(versionCounts).map(([version, count]) => ({\n        version,\n        count\n      }));\n      versionData.sort((a, b) => a.version - b.version);\n      return versionData;\n    },\n    getVersionTypeData(surname) {\n      const versionTypeCounts = {};\n      jsonData.forEach(item => {\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince) {\n          const version = item.版本类型;\n          versionTypeCounts[version] = (versionTypeCounts[version] || 0) + 1;\n        }\n      });\n      const versionTypeData = Object.entries(versionTypeCounts).map(([version, count]) => ({\n        version,\n        count\n      }));\n      versionTypeData.sort((a, b) => a.version - b.version);\n      return versionTypeData;\n    },\n    getSankeyData(surname) {\n      const sankeyData = {\n        nodes: [],\n        links: []\n      };\n      const addedNodes = new Set(); // 用于存储已添加的节点\n\n      jsonData.forEach(item => {\n        // 过滤掉始祖原居地、始祖迁居地、始迁祖原居地、始迁祖迁居地为0的数据\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince && item.始祖原居地 !== 0 && item.始祖迁居地 !== 0 && item.始迁祖原居地 !== 0 && item.始迁祖迁居地 !== 0) {\n          const nodes = [item.始祖原居地, item.始祖迁居地, item.始迁祖原居地, item.始迁祖迁居地];\n          nodes.forEach(location => {\n            if (!addedNodes.has(location)) {\n              addedNodes.add(location);\n              sankeyData.nodes.push({\n                name: location\n              });\n            }\n          });\n\n          // 检查是否存在环路\n          const link1 = {\n            source: item.始祖原居地,\n            target: item.始祖迁居地,\n            value: 1\n          };\n          const link2 = {\n            source: item.始迁祖原居地,\n            target: item.始迁祖迁居地,\n            value: 1\n          };\n\n          // 只添加不形成环路的链接\n          if (link1.source !== link1.target && !this.isCircular(link1, sankeyData.links)) {\n            sankeyData.links.push(link1);\n          }\n          if (link2.source !== link2.target && !this.isCircular(link2, sankeyData.links)) {\n            sankeyData.links.push(link2);\n          }\n        }\n      });\n      return sankeyData;\n    },\n    // 检查是否形成环路\n    isCircular(link, existingLinks) {\n      const source = link.source;\n      const target = link.target;\n\n      // 通过已存在的链接判断是否形成环路\n      return existingLinks.some(existingLink => {\n        return existingLink.source === target && existingLink.target === source;\n      });\n    },\n    // 处理词云点击事件，显示该姓氏的版本年代数据\n    handleWordClick(word) {\n      const surname = word.name;\n      this.versionData = this.getSurnameVersionData(surname);\n      this.chartTitle = `${this.selectedProvince}省${surname}姓家谱数量变化`; // 动态更新标题\n      this.updateLineChart(this.versionData); // 更新折线图\n\n      this.versionTypeData = this.getVersionTypeData(surname); // 获取该姓氏的版本类型数据\n      this.ChartTitle = `${this.selectedProvince}省${surname}姓家谱版本类型统计`; // 动态更新标题\n      this.updatePieChart(this.versionTypeData); // 调用饼图更新方法\n\n      this.sankeyData = this.getSankeyData(surname); // 更新桑基图数据\n      this.$refs.sangJiTu.updateChart(this.sankeyData); // 更新桑基图\n    },\n    // 更新折线图\n    updateLineChart(versionData) {\n      this.$refs.zheXianTu.updateChart(versionData);\n    },\n    // 更新饼图\n    updatePieChart(versionTypeData) {\n      this.$refs.zhuZhuangTu.updateChart(versionTypeData); // 通过ref更新柱状图组件的数据\n    },\n    // 处理地图点击事件，更新当前选中的省份\n    handleProvinceClick(province) {\n      this.selectedProvince = province;\n      this.words = this.getTop20Surnames(province); // 更新词云数据\n\n      this.versionData = this.getSurnameVersionData(this.defaultSurname); // 获取默认“李”姓数据\n      this.chartTitle = `${province}省${this.defaultSurname}姓家谱数量变化`; // 更新标题\n\n      this.versionTypeData = this.getVersionTypeData(this.defaultSurname);\n      this.ChartTitle = `${province}省${this.defaultSurname}姓家谱版本类型统计`;\n      this.sankeyData = this.getSankeyData(this.defaultSurname); // 默认展示“李”姓的桑基图\n      this.$refs.sangJiTu.updateChart(this.sankeyData); // 更新桑基图\n    },\n    closePopup() {\n      this.showPopup = false;\n    }\n  },\n  mounted() {\n    this.words = this.getTop20Surnames(this.selectedProvince); // 初始化词云数据\n    this.versionData = this.getSurnameVersionData(this.defaultSurname); // 默认显示“李”姓数据\n    this.versionTypeData = this.getVersionTypeData(this.defaultSurname);\n    this.sankeyData = this.getSankeyData(this.defaultSurname); // 默认展示“李”姓的桑基图\n  }\n};","map":{"version":3,"names":["XingShiXuanZe","DiTu1","CiYun","DiTu2","ZheXianTu","ZhuZhuangTu","SangJiTu","jsonData","require","name","components","data","menuItems","activeIndex","words","versionData","versionTypeData","chartTitle","ChartTitle","clickedWord","showPopup","selectedProvince","defaultSurname","sankeyData","methods","setActive","index","getTop20Surnames","province","surnameCounts","forEach","item","居地","姓氏","sortedSurnames","Object","entries","sort","a","b","map","light","getSurnameVersionData","surname","versionCounts","version","版本年代","count","getVersionTypeData","versionTypeCounts","版本类型","getSankeyData","nodes","links","addedNodes","Set","始祖原居地","始祖迁居地","始迁祖原居地","始迁祖迁居地","location","has","add","push","link1","source","target","value","link2","isCircular","link","existingLinks","some","existingLink","handleWordClick","word","updateLineChart","updatePieChart","$refs","sangJiTu","updateChart","zheXianTu","zhuZhuangTu","handleProvinceClick","closePopup","mounted"],"sources":["C:\\Users\\黄祖旭\\Desktop\\jiapudemo1\\jiapudemo1\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n\n    <h1><span>寻根问祖</span><span>探索家族的历史脉络</span></h1>\n    <h3>每个姓氏背后都有一段深厚的历史与文化...</h3>\n\n    <div class=\"navbar\">\n      <div class=\"navbar-title\">\n        寻根问祖 <span>可以看见的家谱可视化平台</span>\n      </div>\n      <div class=\"navbar-menu\">\n        <a\n            v-for=\"(item, index) in menuItems\"\n            :key=\"index\"\n            href=\"#\"\n            :class=\"['menu-item', { active: activeIndex === index }]\"\n            @click=\"setActive(index)\"\n        >\n          {{ item }}\n        </a>\n      </div>\n    </div>\n\n    <h4>家谱地图展示--了解你的姓氏在全国各地的家族故事</h4>\n    <div class=\"horizontal-container\">\n      <XingShiXuanZe />\n      <DiTu1 />\n    </div>\n\n    <hr />\n    <h4>地域姓氏构成对比--探索各地的家族足迹</h4>\n    <div class=\"horizontal-container\">\n      <CiYun :wordArr=\"words\" @word-clicked=\"handleWordClick\" />\n      <DiTu2 @province-clicked=\"handleProvinceClick\" />\n    </div>\n\n    <hr />\n    <h4>姓氏时空上的分布趋势--深入家族传承之路与繁衍之势</h4>\n    <div class=\"horizontal-container\">\n      <ZheXianTu ref=\"zheXianTu\" :versionData=\"versionData\" :chartTitle=\"chartTitle\" />\n      <ZhuZhuangTu ref=\"zhuZhuangTu\" :versionTypeData=\"versionTypeData\" :ChartTitle=\"ChartTitle\" />\n    </div>\n    <hr>\n    <h4>家族迁徙路径--探索家族的迁徙脉络</h4>\n    <div class=\"horizontal-container\">\n      <SangJiTu ref=\"sangJiTu\" :sankeyData=\"sankeyData\" />\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport XingShiXuanZe from './components/XingShiXuanZe.vue';\nimport DiTu1 from './components/DiTu1.vue';\nimport CiYun from '@/components/CiYun.vue';\nimport DiTu2 from '@/components/DiTu2.vue';\nimport ZheXianTu from '@/components/ZheXianTu.vue';\nimport ZhuZhuangTu from '@/components/ZhuZhuangTu.vue';\nimport SangJiTu  from \"@/components/SangJiTu.vue\";\n\nconst jsonData = require('./assets/new.json');\n\nexport default {\n  name: 'App',\n  components: {\n    SangJiTu,\n    XingShiXuanZe,\n    DiTu1,\n    CiYun,\n    DiTu2,\n    ZheXianTu,\n    ZhuZhuangTu,\n  },\n  data() {\n    return {\n      menuItems: ['家谱地图展示', '地域姓氏构成对比', '姓氏时空上的分布趋势'],\n      activeIndex: 0,\n      words: [],\n      versionData: [],//折线图版本数据\n      versionTypeData: [],//柱状图版本类型数据\n      chartTitle: '浙江省李姓家谱数量变化',  // 折线图默认标题\n      ChartTitle: '浙江省李姓家谱版本类型统计',\n      clickedWord: null,\n      showPopup: false,\n      selectedProvince: '浙江', // 默认选中省份\n      defaultSurname: '李', // 默认姓氏\n      sankeyData: [], // 用来存储桑基图数据\n    };\n  },\n  methods: {\n    setActive(index) {\n      this.activeIndex = index;\n    },\n\n    // 获取选中省份的前20个姓氏\n    getTop20Surnames(province) {\n      const surnameCounts = {};\n      jsonData.forEach((item) => {\n        if (item.居地 === province) {\n          surnameCounts[item.姓氏] = (surnameCounts[item.姓氏] || 0) + 1;\n        }\n      });\n\n      const sortedSurnames = Object.entries(surnameCounts).sort((a, b) => b[1] - a[1]);\n      return sortedSurnames.map(([name]) => ({ name, light: true }));\n    },\n\n    // 获取指定姓氏的版本年代数据\n    getSurnameVersionData(surname) {\n      const versionCounts = {};\n\n      jsonData.forEach(item => {\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince) {\n          const version = item.版本年代;\n          versionCounts[version] = (versionCounts[version] || 0) + 1;\n        }\n      });\n\n      const versionData = Object.entries(versionCounts).map(([version, count]) => ({\n        version,\n        count,\n      }));\n\n      versionData.sort((a, b) => a.version - b.version);\n      return versionData;\n    },\n\n    getVersionTypeData(surname) {\n      const versionTypeCounts = {};\n\n      jsonData.forEach(item => {\n        if (item.姓氏 === surname && item.居地 === this.selectedProvince) {\n          const version = item.版本类型;\n          versionTypeCounts[version] = (versionTypeCounts[version] || 0) + 1;\n        }\n      });\n\n      const  versionTypeData = Object.entries(versionTypeCounts).map(([version, count]) => ({\n        version,\n        count,\n      }));\n\n      versionTypeData.sort((a, b) => a.version - b.version);\n      return versionTypeData;\n    },\n\n    getSankeyData(surname) {\n      const sankeyData = { nodes: [], links: [] };\n      const addedNodes = new Set(); // 用于存储已添加的节点\n\n      jsonData.forEach(item => {\n        // 过滤掉始祖原居地、始祖迁居地、始迁祖原居地、始迁祖迁居地为0的数据\n        if (\n            item.姓氏 === surname &&\n            item.居地 === this.selectedProvince &&\n            item.始祖原居地 !== 0 &&\n            item.始祖迁居地 !== 0  &&\n            item.始迁祖原居地 !== 0 &&\n            item.始迁祖迁居地 !== 0\n        ) {\n          const nodes = [\n            item.始祖原居地,\n            item.始祖迁居地,\n            item.始迁祖原居地,\n            item.始迁祖迁居地\n          ];\n\n          nodes.forEach(location => {\n            if (!addedNodes.has(location)) {\n              addedNodes.add(location);\n              sankeyData.nodes.push({ name: location });\n            }\n          });\n\n          // 检查是否存在环路\n          const link1 = {\n            source: item.始祖原居地,\n            target: item.始祖迁居地,\n            value: 1\n          };\n          const link2 = {\n            source: item.始迁祖原居地,\n            target: item.始迁祖迁居地,\n            value: 1\n          };\n\n          // 只添加不形成环路的链接\n          if (link1.source !== link1.target && !this.isCircular(link1, sankeyData.links)) {\n            sankeyData.links.push(link1);\n          }\n\n          if (link2.source !== link2.target && !this.isCircular(link2, sankeyData.links)) {\n            sankeyData.links.push(link2);\n          }\n        }\n      });\n\n      return sankeyData;\n    },\n\n// 检查是否形成环路\n    isCircular(link, existingLinks) {\n      const source = link.source;\n      const target = link.target;\n\n      // 通过已存在的链接判断是否形成环路\n      return existingLinks.some(existingLink => {\n        return existingLink.source === target && existingLink.target === source;\n      });\n    },\n\n    // 处理词云点击事件，显示该姓氏的版本年代数据\n    handleWordClick(word) {\n      const surname = word.name;\n      this.versionData = this.getSurnameVersionData(surname);\n      this.chartTitle = `${this.selectedProvince}省${surname}姓家谱数量变化`;  // 动态更新标题\n      this.updateLineChart(this.versionData); // 更新折线图\n\n      this.versionTypeData = this.getVersionTypeData(surname); // 获取该姓氏的版本类型数据\n      this.ChartTitle = `${this.selectedProvince}省${surname}姓家谱版本类型统计`;  // 动态更新标题\n      this.updatePieChart(this.versionTypeData); // 调用饼图更新方法\n\n      this.sankeyData = this.getSankeyData(surname); // 更新桑基图数据\n      this.$refs.sangJiTu.updateChart(this.sankeyData); // 更新桑基图\n    },\n\n    // 更新折线图\n    updateLineChart(versionData) {\n      this.$refs.zheXianTu.updateChart(versionData);\n    },\n    // 更新饼图\n    updatePieChart(versionTypeData) {\n      this.$refs.zhuZhuangTu.updateChart(versionTypeData); // 通过ref更新柱状图组件的数据\n    },\n\n    // 处理地图点击事件，更新当前选中的省份\n    handleProvinceClick(province) {\n      this.selectedProvince = province;\n      this.words = this.getTop20Surnames(province);  // 更新词云数据\n\n      this.versionData = this.getSurnameVersionData(this.defaultSurname);  // 获取默认“李”姓数据\n      this.chartTitle = `${province}省${this.defaultSurname}姓家谱数量变化`;  // 更新标题\n\n      this.versionTypeData = this.getVersionTypeData(this.defaultSurname);\n      this.ChartTitle = `${province}省${this.defaultSurname}姓家谱版本类型统计`;\n\n      this.sankeyData = this.getSankeyData(this.defaultSurname); // 默认展示“李”姓的桑基图\n      this.$refs.sangJiTu.updateChart(this.sankeyData); // 更新桑基图\n    },\n\n    closePopup() {\n      this.showPopup = false;\n    },\n  },\n  mounted() {\n    this.words = this.getTop20Surnames(this.selectedProvince);  // 初始化词云数据\n    this.versionData = this.getSurnameVersionData(this.defaultSurname);  // 默认显示“李”姓数据\n    this.versionTypeData = this.getVersionTypeData(this.defaultSurname);\n    this.sankeyData = this.getSankeyData(this.defaultSurname); // 默认展示“李”姓的桑基图\n  },\n};\n</script>\n\n<style scoped>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n\n  background-image: url('./assets/picture/background4.jpg'); /* 替换为你的图片路径 */\n  background-size: cover; /* 背景填满整个页面 */\n  background-position: center; /* 背景居中 */\n  background-attachment: fixed; /* 背景固定，不随页面滚动 */\n}\nh1 {\n  font-family: '方正隶变简体', serif;\n  font-size: 6rem;\n  color: #2c3e50;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n  margin-bottom: 20px;\n  display: flex; /* 使用flex布局 */\n  flex-wrap: wrap; /* 允许换行 */\n  align-items: center; /* 垂直居中 */\n  justify-content: center; /* 水平居中 */\n}\nh3 {\n  font-family: 'Arial', sans-serif;\n  font-size: 1.2rem;\n  color: #34495e;\n  line-height: 1.8;\n  max-width: 800px;\n  margin: 0 auto;\n  text-align: justify;\n}\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  background-color: #fffff0;\n  border-bottom: 1px solid #ddd;\n  font-family: 'Arial', sans-serif;\n  margin-left: 200px;\n  border: none;\n}\n.navbar-title {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #000;\n}\n.navbar-menu {\n  display: flex;\n  gap: 20px;\n  margin-right: 200px;\n}\n.menu-item {\n  text-decoration: none;\n  color: #333;\n  font-size: 1rem;\n  padding: 5px 10px;\n  position: relative;\n  transition: color 0.3s ease;\n}\n.menu-item:hover {\n  color: #f60;\n}\n.menu-item.active {\n  color: #f60;\n  font-weight: bold;\n}\n.horizontal-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 30px;\n  padding: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}